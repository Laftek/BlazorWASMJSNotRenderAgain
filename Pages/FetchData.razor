@page "/fetchdata"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="container">
    <canvas id="canvas" width="500" height="500" @onclick="StarsRatingFromRive"></canvas>
    <div class="content">
        <input type="number" @bind:event="oninput" @bind="StarsRatingValue" />

        @StarsRatingValue
    </div>
</div>


@code {
    IJSObjectReference? rivWrapper;

    public string RiveSrc { get; set; } = "starRating.riv";
    public string RiveCanvas { get; set; } = "canvas";
    public bool RiveAutoPlay { get; set; } = true;
    public string RiveStateMachine { get; set; } = "State Machine 1";

    public bool isHandsUp { get; set; }
    public bool isChecking { get; set; }
    public bool isFromRive { get; set; } = false;
    private int starsRatingValue;
    public int StarsRatingValue
    {
        get
        {
            return starsRatingValue;
        }
        set
        {
            starsRatingValue = value;
            if (!isFromRive)
            {
                StarsRatingFromNET();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && rivWrapper is null)
        {
            rivWrapper = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/FetchData.razor.js");
            await rivWrapper.InvokeVoidAsync("createRive", RiveSrc, RiveCanvas, RiveAutoPlay, RiveStateMachine);
        }
    }


    private async Task StarsRatingFromNET()
    {
        await rivWrapper.InvokeAsync<int>("doStarsRatingFromNET", StarsRatingValue);
        StateHasChanged();
    }

    private async Task StarsRatingFromRive()
    {
        isFromRive = true;
        StarsRatingValue = await rivWrapper.InvokeAsync<int>("doStarsRatingFromRive");
        isFromRive = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (rivWrapper != null)
        {
            await rivWrapper.DisposeAsync();
        }
    }
}
