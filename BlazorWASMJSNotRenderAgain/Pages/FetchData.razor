@page "/fetchdata"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="container">
    <canvas id="canvas" width="500" height="500" @onclick="StarsRatingFromRive"></canvas>
    <div class="content" >
        <input type="number" @bind="@StarsRatingValue" @bind:event="oninput" />
        @StarsRatingValue
        @StartFromJs
    </div>
</div>


@code {
    IJSObjectReference? rivWrapper;
    public bool isHandsUp { get; set; }
    public bool isChecking { get; set; }
    public int StartFromJs { get; set; }
    private int starsRatingValue;
    public int StarsRatingValue
    {
        get
        {
            return starsRatingValue;
        }
        set
        {
            starsRatingValue = value;
            StarsRatingFromNET();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && rivWrapper is null)
        {
            rivWrapper = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/FetchData.razor.js");
            await rivWrapper.InvokeVoidAsync("createRive");
        }
    }


    private async Task StarsRatingFromNET()
    {
        await rivWrapper.InvokeAsync<int>("doStarsRatingFromNET", StarsRatingValue);
        StateHasChanged();
    }

    private async Task StarsRatingFromRive()
    {
        StartFromJs = await rivWrapper.InvokeAsync<int>("doStarsRatingFromRive");
        StateHasChanged();
    }

    //private void Test()
    //{
    //    StartFromJs = 5;
    //}

    public async ValueTask DisposeAsync()
    {
        if (rivWrapper != null)
        {
            await rivWrapper.DisposeAsync();
        }
    }
}
